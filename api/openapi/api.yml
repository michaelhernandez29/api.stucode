openapi: '3.0.2'
info:
  title: StuCode API v1
  version: '1.0'
  description: >
    # Introduction

    Welcome to the official documentation for StuCode's API v1. StuCode is a platform designed to facilitate collaboration and knowledge sharing among programmers. Our API provides developers with access to a wide range of functionalities aimed at enhancing their coding experience.

    ## About StuCode

    StuCode is a dynamic platform where programmers from around the world can come together to share their expertise, learn from each other, and collaborate on coding projects. Whether you're a seasoned developer or just starting out, StuCode offers a welcoming community and a wealth of resources to help you succeed.

    ## API Overview

    Our API is designed to provide seamless integration with StuCode's platform, allowing developers to build custom applications and services that leverage our extensive feature set. From accessing user profiles and managing projects to retrieving code snippets and interacting with discussion threads, our API offers a comprehensive suite of endpoints to meet your development needs.

    ## API BASE URL

    The base URL of our API is: `https://api-stucode.vercel.app`

    ## Authentication

    To access StuCode's API, you need to authenticate your requests using an authorization header. Upon successful authentication, you'll be able to make requests to our API and access the available endpoints.

    ## Getting Started

    To get started with our API, please refer to the documentation below for detailed information on each endpoint, including request parameters, response formats, and usage examples.

    We're excited to have you join the StuCode community and explore the possibilities of our API. Happy coding!
servers:
  - url: /v1
  - url: https://api-stucode.vercel.app
tags:
  - name: user
    description: Endpoints related to user information and operations.
  - name: article
    description: Endpoints related to creation, retrieval, and management of articles.
  - name: like
    description: Endpoints related to management of likes on posts and comments.
  - name: comment
    description: Endpoints related to creation, retrieval, and management of comments.
  - name: follow
    description: Endpoints related to user following and management of follow relationships.
paths:
  /user/register:
    post:
      tags: [user]
      summary: Register a new user
      description: |
        This endpoint allows users to register within the system by providing necessary registration details in the request body. Upon successful registration, users gain access to the platform's features and services.
      x-eov-operation-handler: userController
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The user's name.
                  example: John Doe
                email:
                  type: string
                  description: The user's email address.
                  example: john@example.com
                password:
                  type: string
                  description: The user's chosen password.
                  example: mySecretPassword123
              required:
                - name
                - email
                - password
              additionalProperties: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /user/login:
    post:
      tags: [user]
      summary: User authentication
      description: |
        This endpoint is used for user authentication. It allows users to log in by providing their email address and password. Upon successful authentication, the user will receive an authentication token.
      x-eov-operation-handler: userController
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: The user's email address.
                  example: john@example.com
                password:
                  type: string
                  description: The user's chosen password.
                  example: mySecretPassword123
              required:
                - email
                - password
              additionalProperties: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating success.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the success.
                  data:
                    type: string
                    description: The authentication token generated upon successful login.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /user:
    get:
      tags: [user]
      # security:
      #   - bearerAuth: []
      summary: Retrieve a list of users
      description: |
        This endpoint allows retrieving a list of users from the system.
      x-eov-operation-handler: userController
      operationId: findAll
      parameters:
        - name: page
          in: query
          description: The page number for pagination.
          required: false
          schema:
            type: integer
            format: int64
            default: 0
        - name: limit
          in: query
          description: The limit of results per page.
          required: false
          schema:
            type: integer
            format: int64
            default: 20
        - name: find
          in: query
          description: A search term to filter results.
          required: false
          schema:
            type: string
        - name: orderBy
          in: query
          description: >
            Order of the results: 
              
              - a-z - Order by name ascending. From A to Z
              - z-a - Order by name descending. From Z to A
          required: false
          schema:
            type: string
            enum:
              - a-z
              - z-a
            default: a-z
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating success.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the success.
                  count:
                    type: integer
                    format: int64
                    description: Total count of the results.
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /user/{id}:
    get:
      tags: [user]
      # security:
      #   - bearerAuth: []
      summary: Retrieve user details
      description: |
        This endpoint is used to retrieve specific details of a user using its ID.
      x-eov-operation-handler: userController
      operationId: findById
      parameters:
        - name: id
          in: path
          description: The user's id.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating success.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the success.
                  data:
                    $ref: '#/components/schemas/User'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    put:
      tags: [user]
      # security:
      #   - bearerAuth: []
      summary: Update user details
      description: |
        This endpoint is used to update specific details of a user using its ID.
      x-eov-operation-handler: userController
      operationId: updateById
      parameters:
        - name: id
          in: path
          description: The user's id.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The user's name.
                  example: John Doe
                jobTitle:
                  type: string
                  description: A brief description or biography of the user.
                  example: Global Accounts Engineer
                biography:
                  type: string
                  description: The user's job title or position.
                  example: Oatmeal advocate, veteran 🐠
                logo:
                  type: string
                  description: The user's logo URL.
              additionalProperties: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating success.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the success.
                  data:
                    $ref: '#/components/schemas/User'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    delete:
      tags: [user]
      # security:
      #   - bearerAuth: []
      summary: Delete user details
      description: |
        This endpoint is used to delete a user using its ID.
      x-eov-operation-handler: userController
      operationId: deleteById
      parameters:
        - name: id
          in: path
          description: The user's id.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating success.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the success.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /article:
    post:
      tags: [article]
      # security:
      #   - bearerAuth: []
      summary: Create a new article.
      description: |
        Endpoint to create a new article. Requires the user's ID, article image, title, and content in the request body in JSON format. The user's ID must be in UUID format. Upon successful creation, the endpoint returns the details of the created article.
      x-eov-operation-handler: articleController
      operationId: create
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The user's Id.
                image:
                  type: string
                  description: The article's image.
                title:
                  type: string
                  description: The article's title.
                content:
                  type: string
                  description: The article's content.
              required:
                - userId
                - title
                - content
              additionalProperties: false
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating success.
                    default: 201
                  message:
                    type: string
                    description: Descriptive message of the success.
                  data:
                    $ref: '#/components/schemas/Article'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    get:
      tags: [article]
      # security:
      #   - bearerAuth: []
      summary: Retrieve a list of articles
      description: |
        This endpoint allows retrieving a list of articles from the system.
      x-eov-operation-handler: articleController
      operationId: findAll
      parameters:
        - name: userId
          in: query
          description: The user's Id.
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: The page number for pagination.
          required: false
          schema:
            type: integer
            format: int64
            default: 0
        - name: limit
          in: query
          description: The limit of results per page.
          required: false
          schema:
            type: integer
            format: int64
            default: 20
        - name: find
          in: query
          description: A search term to filter results.
          required: false
          schema:
            type: string
        - name: orderBy
          in: query
          description: >
            Order of the results: 
              
              - a-z - Order by title ascending. From A to Z
              - z-a - Order by title descending. From Z to A
              - updated-at-asc - Orders results by ascending update date. Oldest articles first.
              - updated-at-desc - Orders results by descending update date. Newest articles first.
          required: false
          schema:
            type: string
            enum:
              - a-z
              - z-a
              - updated-at-asc
              - updated-at-desc
            default: a-z
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating success.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the success.
                  count:
                    type: integer
                    format: int64
                    description: Total count of the results.
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Article'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
  /article/{id}:
    get:
      tags: [article]
      # security:
      #   - bearerAuth: []
      summary: Retrieve article details
      description: |
        This endpoint is used to retrieve specific details of an article using its ID.
      x-eov-operation-handler: articleController
      operationId: findById
      parameters:
        - name: id
          in: path
          description: The article's id.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating success.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the success.
                  data:
                    $ref: '#/components/schemas/Article'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    put:
      tags: [article]
      # security:
      #   - bearerAuth: []
      summary: Update article details
      description: |
        This endpoint is used to update specific details of a article using its ID.
      x-eov-operation-handler: articleController
      operationId: updateById
      parameters:
        - name: id
          in: path
          description: The article's id.
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
                  description: The user's Id.
                image:
                  type: string
                  description: The article's image.
                title:
                  type: string
                  description: The article's title.
                content:
                  type: string
                  description: The article's content.
              additionalProperties: false
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating success.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the success.
                  data:
                    $ref: '#/components/schemas/Article'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'
    delete:
      tags: [article]
      # security:
      #   - bearerAuth: []
      summary: Delete article details
      description: |
        This endpoint is used to delete an article using its ID.
      x-eov-operation-handler: articleController
      operationId: deleteById
      parameters:
        - name: id
          in: path
          description: The article's id.
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  statusCode:
                    type: integer
                    format: int64
                    description: HTTP status code indicating success.
                    default: 200
                  message:
                    type: string
                    description: Descriptive message of the success.
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequest'
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forbidden'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
        409:
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Conflict'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalServerError'

components:
  schemas:
    BadRequest:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: HTTP status code indicating a bad request error.
          default: 400
        message:
          type: string
          description: Descriptive message of the error.
        errorCode:
          type: string
          enum:
            - BAD_REQUEST
          description: >
            Possible error codes:
              
            - `BAD_REQUEST`: Indicates a bad request error.'
    Unauthorized:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: HTTP status code indicating an unauthorized error.
          default: 401
        message:
          type: string
          description: Descriptive message of the error.
        errorCode:
          type: string
          enum:
            - UNAUTHORIZED
          description: >
            Possible error codes:
              
            - `UNAUTHORIZED`: Indicates an unauthorized error.'
    Forbidden:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: HTTP status code indicating a forbidden error.
          default: 403
        message:
          type: string
          description: Descriptive message of the error.
        errorCode:
          type: string
          enum:
            - FORBIDDEN
          description: >
            Possible error codes:
              
            - `FORBIDDEN`: Indicates a forbidden error.'
    NotFound:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: HTTP status code indicating a not found error.
          default: 404
        message:
          type: string
          description: Descriptive message of the error.
        errorCode:
          type: string
          enum:
            - NOT_FOUND
          description: >
            Possible error codes:
              
            - `NOT_FOUND`: Indicates a not found error.'
    Conflict:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: HTTP status code indicating a conflict error.
          default: 409
        message:
          type: string
          description: Descriptive message of the error.
        errorCode:
          type: string
          enum:
            - CONFLICT
          description: >
            Possible error codes:
              
            - `CONFLICT`: Indicates a conflict error.'
    InternalServerError:
      type: object
      properties:
        statusCode:
          type: integer
          format: int64
          description: HTTP status code indicating an error.
          default: 500
        message:
          type: string
          description: Descriptive message of the error.
        errorCode:
          type: string
          enum:
            - INTERNAL_SERVER_ERROR
          description: >
            Possible error codes:
              
            - `INTERNAL_SERVER_ERROR`: Indicates an error.'
    User:
      type: object
      properties:
        id:
          type: integer
          description: The user's id.
        name:
          type: string
          description: The user's name.
          example: John Doe
        email:
          type: string
          description: The user's email address.
          example: john@example.com
        jobTitle:
          type: string
          description: A brief description or biography of the user.
          example: Global Accounts Engineer
        biography:
          type: string
          description: The user's job title or position.
          example: Oatmeal advocate, veteran 🐠
        createdAt:
          type: string
          format: date-time
          description: The date the user was created.
        updatedAt:
          type: string
          format: date-time
          description: The date the user was last updated.
        logo:
          type: string
          description: The user's logo URL.
      required:
        - id
        - name
        - email
        - jobTitle
        - biography
        - accountId
        - createdAt
        - updatedAt
        - logo
      additionalProperties: false
    Article:
      properties:
        id:
          type: integer
          description: The account's id.
        createdAt:
          type: string
          format: date-time
          description: The date the account was created.
        updatedAt:
          type: string
          format: date-time
          description: The date the account was last updated.
        userId:
          type: integer
          description: The user's id.
        image:
          type: string
          description: The article's image.
        title:
          type: string
          description: The article's title.
        content:
          type: string
          description: The article's content.
      required:
        - id
        - createdAt
        - updatedAt
        - userId
        - image
        - title
        - content
      additionalProperties: false

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
